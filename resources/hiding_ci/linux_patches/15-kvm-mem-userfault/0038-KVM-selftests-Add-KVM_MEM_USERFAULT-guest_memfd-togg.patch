From 2feda9131e1f2b87f22bbc4234f55def8ec9b4ac Mon Sep 17 00:00:00 2001
From: James Houghton <jthoughton@google.com>
Date: Thu, 9 Jan 2025 20:49:28 +0000
Subject: [PATCH 38/46] KVM: selftests: Add KVM_MEM_USERFAULT + guest_memfd
 toggle tests

Make sure KVM_MEM_USERFAULT can be toggled on and off for
KVM_MEM_GUEST_MEMFD memslots.

Signed-off-by: James Houghton <jthoughton@google.com>
---
 .../selftests/kvm/set_memory_region_test.c    | 30 +++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/tools/testing/selftests/kvm/set_memory_region_test.c b/tools/testing/selftests/kvm/set_memory_region_test.c
index ba3fe8a53b33..20a03cb57acf 100644
--- a/tools/testing/selftests/kvm/set_memory_region_test.c
+++ b/tools/testing/selftests/kvm/set_memory_region_test.c
@@ -606,6 +606,35 @@ static void test_mmio_during_vectoring(void)
 
 	kvm_vm_free(vm);
 }
+
+static void test_private_memory_region_userfault(void)
+{
+       struct kvm_vm *vm;
+       int memfd;
+
+       pr_info("Testing toggling KVM_MEM_USERFAULT on KVM_MEM_GUEST_MEMFD memory regions\n");
+
+       vm = vm_create_barebones_type(KVM_X86_SW_PROTECTED_VM);
+
+       test_invalid_guest_memfd(vm, vm->kvm_fd, 0, "KVM fd should fail");
+       test_invalid_guest_memfd(vm, vm->fd, 0, "VM's fd should fail");
+
+       memfd = vm_create_guest_memfd(vm, MEM_REGION_SIZE, 0);
+
+       vm_set_user_memory_region2(vm, MEM_REGION_SLOT, KVM_MEM_GUEST_MEMFD,
+                                  MEM_REGION_GPA, MEM_REGION_SIZE, 0, memfd, 0);
+
+       vm_set_user_memory_region2(vm, MEM_REGION_SLOT,
+                                  KVM_MEM_GUEST_MEMFD | KVM_MEM_USERFAULT,
+                                  MEM_REGION_GPA, MEM_REGION_SIZE, 0, memfd, 0);
+
+       vm_set_user_memory_region2(vm, MEM_REGION_SLOT, KVM_MEM_GUEST_MEMFD,
+                                  MEM_REGION_GPA, MEM_REGION_SIZE, 0, memfd, 0);
+
+       close(memfd);
+
+       kvm_vm_free(vm);
+}
 #endif
 
 int main(int argc, char *argv[])
@@ -633,6 +662,7 @@ int main(int argc, char *argv[])
 	    (kvm_check_cap(KVM_CAP_VM_TYPES) & BIT(KVM_X86_SW_PROTECTED_VM))) {
 		test_add_private_memory_region();
 		test_add_overlapping_private_memory_regions();
+		test_private_memory_region_userfault();
 	} else {
 		pr_info("Skipping tests for KVM_MEM_GUEST_MEMFD memory regions\n");
 	}
-- 
2.50.1

